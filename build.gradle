import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:4.5.1'
    }
}

apply plugin: 'java'
apply plugin: 'nebula.deb'

compileJava.sourceCompatibility = 1.8

group = 'io.github.jonestimd'
version = '1.5.0-SNAPSHOT'

allprojects { // TODO add plugin-api module and test-common module
    repositories {
        mavenLocal()
        mavenCentral()
//        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}

def mainClass = 'io.github.jonestimd.finance.ApplicationLauncher'
def hibernateVersion = "4.3.7.Final"

evaluationDependsOnChildren()

dependencies {
//    compile files( System.getProperty("java.home") + "/lib/ext/jfxrt.jar")
    compile( group: 'com.google.guava', name: 'guava', version: '21.0' )
    compile( group: 'commons-lang', name: 'commons-lang', version: '2.4' )
    compile( group: 'log4j', name: 'log4j', version: '1.2.15' ) { transitive = false }
    compile( group: 'org.hibernate', name: 'hibernate-core', version: hibernateVersion ) {
        exclude group: 'org.jboss.logging', module: 'jboss-logging-annotations'
        exclude group: 'org.jboss', module: 'jandex'
    }
    compile( group: 'org.hibernate', name: 'hibernate-tools', version: '4.3.1.CR1' ) { transitive = false }
    compile( group: 'com.itextpdf', name: 'itextpdf', version: '5.5.3' )
    compile( group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.3.6' )
    compile( group: 'org.apache.poi', name: 'poi', version: '3.17' )
    compile( group: 'org.jsoup', name: 'jsoup', version: '1.8.1' )
    compile( group: 'org.glassfish', name: 'javax.json', version: '1.0.4' )
    compile( group: 'io.github.jonestimd', name: 'subsets', version: '1.0')
    compile( group: 'io.github.jonestimd', name: 'swing-extensions', version: '1.3.0')
    compile( group: 'com.typesafe', name: 'config', version: '1.3.0')

    runtime( group: 'org.hibernate', name: 'hibernate-c3p0', version: hibernateVersion ) {
        exclude group: 'org.hibernate', module: 'hibernate-core'
        exclude group: 'org.jboss.logging', module: 'jboss-logging-annotations'
    }
    runtime( group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.6.1' ) { transitive = false }
    runtime( group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.6.1' ) { transitive = false }
    runtime( group: 'org.objenesis', name: 'objenesis', version: '1.2' )
    runtime( group: 'org.javassist', name: 'javassist', version: '3.18.1-GA' )
    runtime( group: 'mysql', name: 'mysql-connector-java', version: '5.1.6' )
    runtime( group: 'com.jgoodies', name: 'jgoodies-looks', version: '2.5.3' )
    runtime( group: 'com.jgoodies', name: 'jgoodies-common', version: '1.7.0' )
    runtime( group: 'org.postgresql', name: 'postgresql', version: '9.4.1208')
    runtime( group: 'org.apache.derby', name: 'derby', version: '10.13.1.1')

    testCompile( group: 'junit', name: 'junit', version: '4.7' )
    testCompile( group: 'org.assertj', name: 'assertj-swing-junit', version: '3.8.0' )
    testCompile( group: 'org.mockito', name: 'mockito-core', version: '1.9.0' )

    testRuntime( group: 'org.hsqldb', name: 'hsqldb', version: '2.3.3', classifier: 'jdk6debug')
}

processResources {
    filesMatching("**/*.properties") {
        filter(ReplaceTokens, tokens: ['io.github.jonestimd.finance.version': version, 'build.date': new Date().toString()])
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'tdj-finances',
                'Implementation-Version': version,
                'Main-Class': mainClass,
                'Class-Path': configurations.runtime.files.findAll {
                    ! it.name.matches("(mysql-connector-java|postgresql|derby)-.*\\.jar")
                }.collect { 'libs/' + it.name }.join(' ')
    }
    doLast {
        ant.chmod(file: archivePath, perm: 'a+x')
    }
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('link', 'http://docs.oracle.com/javase/8/docs/api')
    options.addStringOption('link', 'http://typesafehub.github.com/config/latest/api/')
    options.addStringOption('header',
            '<style>' +
                    'div.description table, div.description td, div.description th ' +
                    '{ border: 1px solid black; border-collapse: collapse; padding: 2px 3px 0 3px}' +
                    '</style>')
}

def childRuntime(String name) {
    childProjects[name].configurations.runtime.files
            .findAll { ! configurations.runtime.files.contains(it) }
            .findAll { ! configurations.archives.artifacts.collect{ it.file }.contains(it) }
}

def dependencyJars = copySpec {
    from configurations.runtime.files, {
        into 'libs'
        exclude "derby-*.jar", "mysql-connector-java-*.jar", "postgresql-*.jar"
    }
    from configurations.runtime.files, {
        into 'drivers'
        include "derby-*.jar", "mysql-connector-java-*.jar", "postgresql-*.jar"
    }
}
def licenseFile = copySpec {
    from project.rootDir, {
        include 'LICENSE'
        rename { it + '.txt' }
    }
}

task pluginDependencies(type: Copy) {
    from childRuntime('stockquote-plugin')
    into "$buildDir/plugins"
}

task distZip(overwrite: true, type: Zip, dependsOn: [jar, ':stockquote-plugin:jar', pluginDependencies]) {
    includeEmptyDirs = false
    into 'finances'
    from(['package/linux', 'package/windows']) {
        exclude 'finances'
        filesMatching('Finances.desktop') {
            expand(['version': project.properties.version])
        }
    }
    from project.libsDir
    from childRuntime('stockquote-plugin'), {
        into 'plugins'
    }

    with licenseFile
    with dependencyJars
}

task prepareMsi(overwrite: true, type: Copy, dependsOn: [jar, ':stockquote-plugin:jar']) {
    // TODO handle update/reinstall
    includeEmptyDirs = false
    destinationDir = file("${project.buildDir}/tmp")

    with licenseFile
    with dependencyJars
}

task distMsi(type: Exec, dependsOn: [prepareMsi, pluginDependencies]) {
    workingDir project.rootDir
    commandLine 'javapackager', '-deploy', '-verbose', '-native', 'msi', '-name', 'Finances',
            '-outdir', 'build\\distributions', '-outfile', 'finances',
            '-srcdir', 'build\\tmp', '-srcfiles', 'LICENSE.txt;libs;drivers',
            '-srcdir', 'build\\libs', '-srcfiles', "finances-${project.version}.jar;plugins",
            '-srcdir', 'build', '-srcfiles', "plugins",
            '-appclass', mainClass, '-Bidentifier=0ab6d075-c33e-45de-9218-b73b14cb0605',
            '-BinstalldirChooser=true', '-BlicenseFile=LICENSE.txt',
            '-Bvendor=jonestimd', "-BappVersion=${project.version.replace("-SNAPSHOT", "")}",
            '-Bicon=finances.ico', '-Bwin.menuGroup=Finances'
}

task distDeb(type: Deb, dependsOn: [jar, ':stockquote-plugin:jar', pluginDependencies]) {
    release '1'
    url 'https://github.com/jonestimd/finances'
    maintainer 'jonestimd@users.noreply.github.com'
    summary 'Java application for tracking personal finances in a SQL database.'
    license 'MIT'

    suggests('oracle-java8-installer').or('openjdk-8-jre').or('openjdk-8-jdk')
    suggests('postgresql').or('mysql-server')

    user 'root'
    permissionGroup 'root'
    fileMode 0644

    into('/opt/finances')

    from(project.libsDir)
    from childRuntime('stockquote-plugin'), {
        into 'plugins'
    }
    from('package/linux') {
        filesMatching('Finances.desktop') {
            into('/usr/share/applications')
            expand(['version': project.properties.version])
        }
        filesMatching('finances') {
            into('/usr/bin')
            expand(['version': project.properties.version])
            fileMode 0755
        }
        filesMatching('*.png') {
            into('/opt/finances')
        }
    }

    with licenseFile
    with dependencyJars
}

//task javaHome {
//    System.out.println(System.getProperty("java.home"))
//    System.out.println(project.tasks.compileJava.classpath)
//    project.tasks.each() { prop ->
//        System.out.println(prop)
//    }
//}
